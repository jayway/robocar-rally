AWSTemplateFormatVersion: '2010-09-09'
Description: Donkey Server EC2 instance

# See https://aws.amazon.com/blogs/ai/build-an-autonomous-vehicle-on-aws-and-race-it-at-the-reinvent-robocar-rally/
# TODOs:
# - Add IPRange to SGs
# - Add proper permissions to EC2 role
# - Add EBS (32 GB General Purpose GP2)
# - Add init scripts
# - Add SSM

Parameters:

  VpcId:
    Description: An existing, public VPC
    Type: AWS::EC2::VPC::Id
    #Default: vpc-af8792c9
    #Default: vpc-11a6c269
    Default: vpc-ce3730a9


  InstanceType:
    Description: EC2 instance type
    Type: String
    Default: g2.2xlarge

  # See http://docs.aws.amazon.com/dlami/latest/devguide/Ubuntu1_0.html
  # https://aws.amazon.com/marketplace/pp/B076TGJHY1?qid=1511529400267&sr=0-3&ref_=srh_res_product_title
  # https://aws.amazon.com/marketplace/pp/B077GCH38C?qid=1511529400267&sr=0-4&ref_=srh_res_product_title
  ImageId:
    Description: AMI image name
    Type: AWS::EC2::Image::Id
    # us-west-2 Default: ami-f1e73689
    # us-east-1
    #Default: ami-405ade3a
    Default: ami-1812bb61


  KeyName:
    Description: Existing EC2 KeyPair to enable SSH access
    Type: AWS::EC2::KeyPair::KeyName
    Default: robo-car

  CidrGroup:
    Description: cidr
    Type: String
    #Default: "208.78.236.1/32"
    Default: "31.209.25.130/32"

Resources:

  DonkeySg:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Donkey Car needs access to port 8885-8888
      VpcId: !Ref VpcId
      SecurityGroupIngress:
      -
        IpProtocol: tcp
        FromPort: 8885
        ToPort: 8888
        CidrIp: !Ref CidrGroup

  SshSg:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: SSH access
      VpcId: !Ref VpcId
      SecurityGroupIngress:
      -
        IpProtocol: tcp
        FromPort: 443
        ToPort: 443
        CidrIp: !Ref CidrGroup
      -
        IpProtocol: tcp
        FromPort: 22
        ToPort: 22
        CidrIp: !Ref CidrGroup 

  Instance:
    Type: AWS::EC2::Instance
    Properties:
      InstanceType: !Ref InstanceType
      ImageId: !Ref ImageId
      IamInstanceProfile: !Ref InstanceProfile
      KeyName: !Ref KeyName
      BlockDeviceMappings: 
          - DeviceName: "/dev/sdm"
            Ebs: 
              VolumeType: "gp2"
              DeleteOnTermination: "true"
              VolumeSize: "32"
          - DeviceName: "/dev/xvda"
            NoDevice: {}
      SecurityGroupIds:
        - !Ref DonkeySg
        - !Ref SshSg

  InstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Roles:
        - !Ref Role

  Role:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          -
            Effect: Allow
            Principal:
              Service: ec2.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: logs
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: 'arn:aws:logs:*:*:*'

Outputs:
  HostUrl:
    Value: !Sub 'http://${Instance.PublicDnsName}'

  Ssh:
    Value: !Sub 'ssh -i "${KeyName}" ubuntu@${Instance.PublicDnsName}'
